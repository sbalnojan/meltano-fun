containers:
  build-env:
    image: meltano/meltano:latest
    working_directory: /new_project
    run_as_current_user:
      enabled: true
      home_directory: /home/container-user
    volumes:
      - local: ./new_project
        container: /new_project
        options: cached
      - local: ./source
        container: /new_project/source
        options: cached
  build-env_ui:
    image: meltano/meltano:latest
    working_directory: /new_project
    run_as_current_user:
      enabled: true
      home_directory: /home/container-user
    volumes:
      - local: ./new_project
        container: /new_project
        options: cached
      - local: ./source
        container: /new_project/source
        options: cached
      - local: ./empty_folder # we're mounting an empty folder to delete a subfolder... Not fun I know...
        container: /new_project/.meltano/run
        options: cached
    ports:
      - local: 5000
        container: 5000
  postgres:
    image: postgres:13.4-bullseye
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: demo
    ports:
      - local: 5432
        container: 5432
    volumes:
      - local: ./postgres-data
        container: /var/lib/postgresql/data
        options: cached
  
tasks:
  ## Utility tasks
  version:
    description: Display version 
    group: Utility tasks
    run:
      container: build-env
      command: --version

  db:
    description: Start up DB on its own, possibly do this once to load up the "cache"
    group: Utility tasks
    run:
      container: postgres
      
  ui:
    description: fire up UI-server, UI is running, now head over to  http://localhost:5000/
    group: Utility tasks
    run:
      container: build-env_ui
      command: ui

  sh:
    description: Open a shell in our cool build env to debug stuff
    group: Utility tasks
    dependencies:
      - postgres
    run:
      container: build-env
      entrypoint: sh
      
  clean:
    description: Delete meltano project stuff...
    group: Utility tasks
    run:
      container: build-env
      entrypoint: sh -c 'rm -rf * -x source/*'
  
  ## Run once tasks
  1_init:
    description: Initialize a new project in the "new_project" folder
    group: 0. Run Once tasks
    run:
      container: build-env
      entrypoint: sh -c 'meltano init new_project_tmp; mv new_project_tmp/* .;'

  2_add_ex:
    description: Add CSV extractor
    group: 0. Run Once tasks
    run:
      container: build-env
      command: add extractor tap-spreadsheets-anywhere

  3_add_lo:
    description: Add Postgres target
    group: 0. Run Once tasks
    run:
      container: build-env
      command: add loader target-postgres

  4_cp:
    description: Add proper config to taps, and source data.
    group: 0. Run Once tasks
    run:
      container: build-env
      entrypoint: sh -c 'rm meltano.yml; cp ./source/orders.csv ./extract/orders.csv; cp ./source/meltano.yml meltano.yml'


## DOING AN EL RUN
  5_el:
    description: Do one el run...
    group: 1. EL Runs
    dependencies:
      - postgres
    run:
      container: build-env
      command: run tap-spreadsheets-anywhere target-postgres 

## DOING SOME Transformation
  6_add_dbt:
    description: 1. Adding a transformer plugin
    group: 2. T  Runs
    run:
      container: build-env
      command: add transformer dbt

  7_configure:
    description: 2. Configure the dbt project
    group: 2. T Runs
    run:
      container: build-env
      entrypoint: sh -c 'cp -r source/orders_table transform/models'

  8_elt:
    description: 3. Do a dbt run!
    group: 2. T Runs
    dependencies:
      - postgres
    run:
      container: build-env
      command: run tap-spreadsheets-anywhere target-postgres dbt:run

## DOING SOME Reserve ETL/ ELT P

  9_add_jl:
    description: 1. Add another loader to push to some external target
    group: 3. P Runs
    run:
      container: build-env
      command: add loader target-jsonl

  10_add_tp:
    description: 2. Add an Postgres extractor
    group: 3. P Runs
    run:
      container: build-env
      command: add extractor tap-postgres
  
  11_p:
    description: 3. Run our publishing run....
    group: 3. P Runs
    dependencies:
      - postgres
    run:
      container: build-env
      command: run tap-postgres target-jsonl

## DOING SOME ETL - light transformations /mapping

  12_add_tf:
    description: 1. Add a so-called mapper to transform.
    group: 4. ETL Runs
    run:
      container: build-env
      command: add mapper transform-field

  13_etl:
    description: 2. Add an Postgres extractor
    group: 4. ETL Runs
    dependencies:
      - postgres
    run:
      container: build-env
      command: run tap-postgres hash-id target-jsonl
        
    
    #run tap-spreadsheets-anywhere target-postgres dbt:run  
      
